#!/usr/bin/env bash

# Super cool keyboard stuffs.
# Required for x applications
# setxkbmap -option caps:ctrl_modifier

export STOW_FOLDERS="nvim,uwuntu,bash"
export EDITOR="nvim"

go-nvim() {
    cd ~/.dotfiles/nvim/.config/nvim
}
change_background() {
    dconf write /org/mate/desktop/background/picture-filename "'$HOME/anime/$(ls ~/anime| fzf)'"
}

die () {
    echo >&2 "$@"
    exit 1
}

get_latest_release() {
  curl --silent "https://api.github.com/repos/$1/releases/latest" | # Get latest release from GitHub api
    grep '"tag_name":' |                                            # Get tag line
    sed -E 's/.*"([^"]+)".*/\1/'                                    # Pluck JSON value
}

k9s-upgrade() {
    VERSION=$(get_latest_release derailed/k9s)
    pushd /tmp > /dev/null 2>&1
    # Download the binary
    echo -e "${ARROW} ${GREEN}Downloading k9s ${VERSION}${NC}"
    wget -q https://github.com/derailed/k9s/releases/download/$VERSION/k9s_Linux_x86_64.tar.gz
    # Extract the binary
    echo -e "${ARROW} ${GREEN}Extracting k9s ${VERSION}${NC}"
    tar -xzf k9s_Linux_x86_64.tar.gz
    # Move the binary to /usr/local/bin
    sudo mv k9s /usr/local/bin
    # Remove the tar file
    rm k9s_Linux_x86_64.tar.gz
    echo -e "${ARROW} ${GREEN}k9s ${VERSION} installed${NC}"
    k9s version
    popd > /dev/null 2>&1
}

newRole() {
    if [ -z "$1" ]; then
        die "Usage: newRole <role name>"
    fi
    # Check to see if we are in the ansible or ansible-roles directory
    # If we are in ansible, create the role in ansible-roles
    # If we are in ansible-roles, create the role in ansible-roles
    # If we are in neither, error out
    if [ ! -d "ansible" ] && [ ! -d "roles" ]; then
        echo -e "${WARNING} ${RED}Must be in ansible or roles directory."
    else
        echo -e "${ARROW} ${GREEN}Creating role in roles...${NC}"
        ansible-galaxy init roles/$1
    fi
}


go-upgrade() {
    # if no arg is passed, get latest version
    if [[ -z $1 ]]; then
        VERSION=$(curl -s https://go.dev/dl/?mode=json | jq -r '.[0].version')
      else
        VERSION="go$1"
    fi
    OS=linux
    ARCH=amd64
    pushd /tmp > /dev/null 2>&1
    echo -e "${ARROW} ${GREEN}Downloading upgrade $VERSION...${NC}"
    wget -q https://storage.googleapis.com/golang/$VERSION.$OS-$ARCH.tar.gz
    echo -e "${ARROW} ${GREEN}Extracting...${NC}"
    tar -xvf $VERSION.$OS-$ARCH.tar.gz > /dev/null 2>&1
    sudo rm -rf /usr/local/go
    echo -e "${ARROW} ${GREEN}Installing...${NC}"
    sudo mv go /usr/local
    popd > /dev/null 2>&1
    echo -e "${CHECK_MARK} ${GREEN}Successfully Installed GO Version: ${YELLOW}$(/usr/local/go/bin/go version)${NC}"
}

addToPath() {
    if [[ "$PATH" != *"$1"* ]]; then
        export PATH=$PATH:$1
    fi
}

addToPathFront() {
    if [[ "$PATH" != *"$1"* ]]; then
        export PATH=$1:$PATH
    fi
}
